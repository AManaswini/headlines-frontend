{"ast":null,"code":"var _jsxFileName = \"/Users/manaswiniaitha/Documents/part-time/headlines-frontend/my-app/src/components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Game.css';\nimport { BrowserRouter as Router, Routes, Route, useNavigate } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport axios from \"axios\";\nimport { Stack } from '@mui/material';\nimport { API_URL, API_GET_URL } from \"../constants\";\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Game() {\n  _s();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const prolificid = searchParams.get('PROLIFIC_PID');\n  const studyid = searchParams.get('STUDY_ID');\n  const navigate = useNavigate();\n  const [inputValue, setInputValue] = useState('');\n  const [predictions, setPredictions] = useState([]);\n  const [text, setText] = useState('');\n  const [isTabActive, setIsTabActive] = useState(true);\n  const [tabChangeCount, setTabChangeCount] = useState(0);\n  const [attemptno, setattemptno] = useState(1);\n  // const [count,setCount] =useState(0);\n  const [Count, setCount] = useState(0);\n  const [inputDict, setInputDict] = useState({});\n  const [timer, setTimer] = useState(0);\n  const [intervalId, setIntervalId] = useState(null);\n  const [seconds, setSeconds] = useState(0);\n  const [totaltime, settotaltime] = useState([]);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setSeconds(prevSeconds => prevSeconds + 1);\n    }, 1000);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  // useEffect(() => {\n  //   const interval = setInterval(() => {\n  //     setTimer((prevTimer) => prevTimer + 1);\n  //   }, 1000);\n\n  //   if (predictions.length === 3) {\n  //     console.log(timer)\n  //     clearInterval(interval);\n  //   }\n\n  //   return () => {\n  //     clearInterval(interval);\n  //   };\n  // }, [predictions]);\n  useEffect(() => {\n    console.log('in game');\n    setInputDict(prevInputDict => ({\n      ...prevInputDict,\n      ['prolificid']: prolificid\n    }));\n    setInputDict(prevInputDict => ({\n      ...prevInputDict,\n      ['studyid']: studyid\n    }));\n  }, []);\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        // User moved away from the tab or window\n        setTabChangeCount(prevCount => prevCount + 1);\n        localStorage.setItem('tabChangeCount', tabChangeCount + 1);\n      }\n    };\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [tabChangeCount]);\n  useEffect(() => {\n    const storedTabChangeCount = localStorage.getItem('tabChangeCount');\n    if (storedTabChangeCount) {\n      setTabChangeCount(parseInt(storedTabChangeCount, 10));\n    }\n  }, []);\n  useEffect(() => {\n    const Count = localStorage.getItem('Count');\n    // console.log('Count')\n    // console.log(Count)\n    if (Count) {\n      //16\n      if (Count >= 3) {\n        console.log(inputDict);\n        localStorage.setItem('results', JSON.stringify(inputDict));\n        // settotaltime((prevtotaltime) => [...prevtotaltime, seconds]);\n        // setInputDict((prevInputDict) => ({\n        //   ...prevInputDict,\n        //   ['time']: totaltime\n        // }));\n        console.log('final time array');\n        console.log(totaltime);\n        localStorage.setItem('time', totaltime);\n        navigate(`/feedback`);\n        localStorage.setItem('Count', 0);\n      }\n    }\n  }, [Count]);\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      setTabChangeCount(0);\n      localStorage.removeItem('tabChangeCount');\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n\n  // async function fetchData() {\n  //   try {\n  //     console.log('=========')\n  //     console.log(timer)\n  //     console.log('====intervalid====')\n  //     console.log(intervalId)\n  //     if (intervalId) {\n  //       console.log('yes')\n  //       clearInterval(intervalId);\n  //       console.log(intervalId)\n  //       setTimer((prevTimer) => 0);\n  //     }\n  //     console.log('===resetting======')\n  //     console.log(timer)\n  //     console.log(intervalId)\n  //     const newIntervalId = setInterval(() => {\n  //       setTimer((prevTimer) => prevTimer + 1);\n  //     }, 1000);\n  //     setIntervalId(newIntervalId);\n  //     console.log('===aftersetting======')\n  //     console.log(timer)\n  //     console.log(intervalId)\n\n  //     const response = await axios.post(API_GET_URL, { task: '0' });\n  //     setText(response.data);\n\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  // }\n\n  async function fetchData() {\n    try {\n      setattemptno(1);\n      // console.log(totaltime)\n      settotaltime(prevtotaltime => [...prevtotaltime, seconds]);\n      console.log(totaltime);\n      setSeconds(0);\n      console.log(seconds);\n      const response = await axios.post(API_GET_URL, {\n        task: '0'\n      });\n      setText(response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  useEffect(() => {\n    fetchData();\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n        setTimer(0);\n      }\n    };\n  }, []);\n  const clearTableRows = () => {\n    var table = document.getElementById(\"table-body\");\n    for (var i = table.rows.length - 1; i > 0; i--) {\n      table.deleteRow(i);\n    }\n  };\n  useEffect(() => {\n    const table = document.getElementById('predictions-table');\n    if (table) {\n      // Clear existing rows\n\n      clearTableRows();\n\n      // Sort predictions array by score in descending order\n      const sortedPredictions = predictions.sort((a, b) => b.Score - a.Score);\n      sortedPredictions.forEach(prediction => {\n        const newRow = table.insertRow();\n        // Create cells and set their values\n        const headlineCell = newRow.insertCell();\n        headlineCell.innerText = prediction.Headline;\n        const scoreCell = newRow.insertCell();\n        scoreCell.innerText = prediction.Score;\n        if (prediction.Headline === inputValue) {\n          newRow.classList.add('green-row');\n        }\n        setInputValue('');\n        if (predictions.length == 3) {\n          console.log('done');\n          setPredictions([]);\n          // console.log(count)\n          setCount(prevCount => prevCount + 1);\n          localStorage.setItem('Count', Count + 1);\n          fetchData();\n          clearTableRows();\n        }\n      });\n    }\n  }, [predictions]);\n  const handleSubmit = async () => {\n    try {\n      // settotaltime((prevtotaltime) => [...prevtotaltime, seconds]);\n      setInputDict(prevInputDict => ({\n        ...prevInputDict,\n        [attemptno]: {\n          ...(prevInputDict[attemptno] || {}),\n          text: {\n            'headline': inputValue,\n            'score': response.data.Score,\n            'consistent': response.data.Consistent\n          }\n        }\n      }));\n      // setInputDict((prevInputDict) => ({\n      //   ...prevInputDict,\n      //   [text]: {\n      //     ...(prevInputDict[text] || {}),\n      //     attempt_number: attemptno\n      //   }\n      // }));\n      setSeconds(0);\n      setattemptno(prevAttemptNo => prevAttemptNo + 1);\n      console.log(seconds);\n      if (inputValue == '') {\n        alert('Please enter a valid input');\n        return;\n      }\n      if (inputValue.length > 100) {\n        alert(\"Your proposed headline is too long.Try to shorten it for good score!!\");\n      }\n      const response = await axios.post(API_URL, {\n        input: inputValue\n      });\n      // setInputDict((prevInputDict) => ({\n      //   ...prevInputDict,\n      //   [text]: {\n      //     ...(prevInputDict[text] || {}),\n      //     // data: response.data\n      //     headline:response.data.Headline\n      //   }\n      // }));\n      // setInputDict((prevInputDict) => ({\n      //   ...prevInputDict,\n      //   [text]: {\n      //     ...(prevInputDict[text] || {}),\n      //     // data: response.data\n      //     score:response.data.Score\n      //   }\n      // }));\n\n      // setInputDict((prevInputDict) => ({\n      //   ...prevInputDict,\n      //   [text]: {\n      //     ...(prevInputDict[text] || {}),\n      //     // data: response.data\n      //     consistent:response.data.Consistent\n      //   }\n      // }));\n      const newPred = {\n        Headline: response.data.Headline,\n        Score: response.data.Score\n      };\n      //setPredictions([{ Headline: response.data.Headline, Score: response.data.Score }]);\n      setPredictions(prevPredictions => [...prevPredictions, newPred]);\n      if (response.data.Consistent < 0.5) {\n        alert(\"You are moving off the topic.Try to be consistent to get a good score!!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"headline\",\n      style: {\n        display: 'flex',\n        background: '#800000',\n        width: '100%',\n        alignItems: 'center',\n        justifyContent: 'center',\n        alignContent: 'center',\n        height: '80px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          color: '#FFF',\n          fontFamily: 'sans-serif'\n        },\n        children: \"Headlines\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      style: {\n        marginTop: \"50px\",\n        fontFamily: 'sans-serif'\n      },\n      children: \"Reframe the below headline to find your score\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        margin: \"50px\",\n        fontFamily: 'sans-serif'\n      },\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Stack, {\n      direction: \"row\",\n      sx: {\n        width: '100%',\n        alignItems: 'center',\n        justifyContent: \"center\",\n        margin: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input\",\n        type: \"text\",\n        value: inputValue,\n        onChange: event => setInputValue(event.target.value),\n        placeholder: \"Enter your proposed headline\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          marginLeft: '10px',\n          top: '-10px',\n          position: 'relative',\n          background: '#3B71CA'\n        },\n        onClick: handleSubmit,\n        children: \"SUBMIT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      id: \"predictions-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Headline\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Score\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        id: \"table-body\",\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"Tab Change Count: \", tabChangeCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: seconds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 298,\n    columnNumber: 7\n  }, this);\n}\n_s(Game, \"g0aJFRw9FYkgcJ3eMm6z79hoDBA=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","useNavigate","Table","Button","axios","Stack","API_URL","API_GET_URL","useLocation","jsxDEV","_jsxDEV","Game","_s","location","searchParams","URLSearchParams","search","prolificid","get","studyid","navigate","inputValue","setInputValue","predictions","setPredictions","text","setText","isTabActive","setIsTabActive","tabChangeCount","setTabChangeCount","attemptno","setattemptno","Count","setCount","inputDict","setInputDict","timer","setTimer","intervalId","setIntervalId","seconds","setSeconds","totaltime","settotaltime","setInterval","prevSeconds","clearInterval","console","log","prevInputDict","handleVisibilityChange","document","hidden","prevCount","localStorage","setItem","addEventListener","removeEventListener","storedTabChangeCount","getItem","parseInt","JSON","stringify","handleBeforeUnload","removeItem","window","fetchData","prevtotaltime","response","post","task","data","error","clearTableRows","table","getElementById","i","rows","length","deleteRow","sortedPredictions","sort","a","b","Score","forEach","prediction","newRow","insertRow","headlineCell","insertCell","innerText","Headline","scoreCell","classList","add","handleSubmit","Consistent","prevAttemptNo","alert","input","newPred","prevPredictions","style","display","flexDirection","alignItems","children","className","background","width","justifyContent","alignContent","height","color","fontFamily","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","margin","direction","sx","type","value","onChange","event","target","placeholder","required","marginLeft","top","position","onClick","striped","bordered","id","_c","$RefreshReg$"],"sources":["/Users/manaswiniaitha/Documents/part-time/headlines-frontend/my-app/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Game.css';\nimport { BrowserRouter as Router,Routes, Route,useNavigate } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport axios from \"axios\";\nimport { Stack } from '@mui/material';\nimport { API_URL,API_GET_URL } from \"../constants\";\nimport { useLocation } from 'react-router-dom';\nfunction Game() {\n    const location = useLocation();\n    const searchParams = new URLSearchParams(location.search);\n    const prolificid = searchParams.get('PROLIFIC_PID');\n    const studyid = searchParams.get('STUDY_ID');\n    const navigate = useNavigate();\n    const [inputValue, setInputValue] = useState('');\n    const [predictions, setPredictions] = useState([]);\n    const [text,setText]=useState('');\n    const [isTabActive, setIsTabActive] = useState(true);\n    const [tabChangeCount, setTabChangeCount] = useState(0);\n    const [attemptno, setattemptno] = useState(1);\n    // const [count,setCount] =useState(0);\n    const [Count,setCount] =useState(0);\n    const [inputDict, setInputDict] = useState({});\n    const [timer, setTimer] = useState(0);\n    const [intervalId, setIntervalId] = useState(null);\n    const [seconds, setSeconds] = useState(0);\n    const [totaltime,settotaltime]=useState([]);\n    useEffect(() => {\n      const intervalId = setInterval(() => {\n        setSeconds((prevSeconds) => prevSeconds + 1);\n      }, 1000);\n\n      return () => {\n        clearInterval(intervalId);\n      };\n    }, []);\n\n\n    // useEffect(() => {\n    //   const interval = setInterval(() => {\n    //     setTimer((prevTimer) => prevTimer + 1);\n    //   }, 1000);\n  \n    //   if (predictions.length === 3) {\n    //     console.log(timer)\n    //     clearInterval(interval);\n    //   }\n  \n    //   return () => {\n    //     clearInterval(interval);\n    //   };\n    // }, [predictions]);\n    useEffect(() => {\n      console.log('in game');\n      setInputDict((prevInputDict) => ({\n        ...prevInputDict,\n        ['prolificid']: prolificid\n      }));\n      setInputDict((prevInputDict) => ({\n        ...prevInputDict,\n        ['studyid']: studyid\n      }));\n    }, []);\n  \n    useEffect(() => {\n      const handleVisibilityChange = () => {\n        if (document.hidden) {\n          // User moved away from the tab or window\n          setTabChangeCount((prevCount) => prevCount + 1);\n          localStorage.setItem('tabChangeCount', tabChangeCount + 1);\n        }\n      };\n  \n      document.addEventListener('visibilitychange', handleVisibilityChange);\n  \n      return () => {\n        document.removeEventListener('visibilitychange', handleVisibilityChange);\n      };\n    }, [tabChangeCount]);\n  \n    useEffect(() => {\n      const storedTabChangeCount = localStorage.getItem('tabChangeCount');\n      if (storedTabChangeCount) {\n        setTabChangeCount(parseInt(storedTabChangeCount, 10));\n      }\n    }, []);\n  \n    useEffect(() => {\n      const Count = localStorage.getItem('Count');\n      // console.log('Count')\n      // console.log(Count)\n      if (Count){\n        //16\n        if (Count >= 3) {\n          console.log(inputDict)\n          localStorage.setItem('results', JSON.stringify(inputDict));\n          // settotaltime((prevtotaltime) => [...prevtotaltime, seconds]);\n          // setInputDict((prevInputDict) => ({\n          //   ...prevInputDict,\n          //   ['time']: totaltime\n          // }));\n          console.log('final time array')\n          console.log(totaltime)\n          localStorage.setItem('time', totaltime);\n          navigate(`/feedback`)\n          localStorage.setItem('Count', 0);\n  \n          }\n      }\n     \n    }, [Count]);\n  \n    useEffect(() => {\n      const handleBeforeUnload = () => {\n        setTabChangeCount(0);\n        localStorage.removeItem('tabChangeCount');\n      };\n      window.addEventListener('beforeunload', handleBeforeUnload);\n  \n      return () => {\n        window.removeEventListener('beforeunload', handleBeforeUnload);\n      };\n    }, []);\n  \n  \n    // async function fetchData() {\n    //   try {\n    //     console.log('=========')\n    //     console.log(timer)\n    //     console.log('====intervalid====')\n    //     console.log(intervalId)\n    //     if (intervalId) {\n    //       console.log('yes')\n    //       clearInterval(intervalId);\n    //       console.log(intervalId)\n    //       setTimer((prevTimer) => 0);\n    //     }\n    //     console.log('===resetting======')\n    //     console.log(timer)\n    //     console.log(intervalId)\n    //     const newIntervalId = setInterval(() => {\n    //       setTimer((prevTimer) => prevTimer + 1);\n    //     }, 1000);\n    //     setIntervalId(newIntervalId);\n    //     console.log('===aftersetting======')\n    //     console.log(timer)\n    //     console.log(intervalId)\n  \n    //     const response = await axios.post(API_GET_URL, { task: '0' });\n    //     setText(response.data);\n        \n         \n        \n    //   } catch (error) {\n    //     console.log(error);\n    //   }\n    // }\n\n    async function fetchData() {\n      try {\n        setattemptno(1);\n        // console.log(totaltime)\n        settotaltime((prevtotaltime) => [...prevtotaltime, seconds]);\n        console.log(totaltime)\n        setSeconds(0);\n        console.log(seconds)\n        const response = await axios.post(API_GET_URL, { task: '0' });\n        setText(response.data);\n    \n      } catch (error) {\n        console.log(error);\n      }\n    }\n    \n    useEffect(() => {\n      fetchData();\n      return () => {\n        if (intervalId) {\n          clearInterval(intervalId);\n          setTimer(0);\n        }\n      };\n    }, []);\n  \n    const clearTableRows = () => {\n      var table = document.getElementById(\"table-body\");\n      for(var i = table.rows.length - 1; i > 0; i--)\n      {\n          table.deleteRow(i);\n      }\n      \n    };\n  \n    useEffect(() => {\n      const table = document.getElementById('predictions-table');\n      \n      if (table) {\n        // Clear existing rows\n        \n        clearTableRows();\n       \n        // Sort predictions array by score in descending order\n        const sortedPredictions= predictions.sort((a, b) => b.Score - a.Score);\n        sortedPredictions.forEach((prediction) => {\n          const newRow = table.insertRow();\n          // Create cells and set their values\n          const headlineCell = newRow.insertCell();\n          headlineCell.innerText = prediction.Headline;\n    \n          const scoreCell = newRow.insertCell();\n          scoreCell.innerText = prediction.Score;\n          if (prediction.Headline === inputValue) {\n            newRow.classList.add('green-row');\n          }\n          setInputValue('');\n          if (predictions.length == 3) {\n            console.log('done');\n            setPredictions([])\n            // console.log(count)\n            setCount((prevCount)=>prevCount+1) \n            localStorage.setItem('Count', Count + 1);\n            fetchData();\n            clearTableRows();\n          }\n        });\n      }\n    }, [predictions]);\n    \n  \n  \n    const handleSubmit = async () => {\n      try {\n        // settotaltime((prevtotaltime) => [...prevtotaltime, seconds]);\n        setInputDict((prevInputDict) => ({\n          ...prevInputDict,\n          [attemptno]: {\n            ...(prevInputDict[attemptno] || {}),\n            text: {'headline':inputValue,'score':response.data.Score,'consistent':response.data.Consistent}\n          }\n        }));  \n        // setInputDict((prevInputDict) => ({\n        //   ...prevInputDict,\n        //   [text]: {\n        //     ...(prevInputDict[text] || {}),\n        //     attempt_number: attemptno\n        //   }\n        // }));\n        setSeconds(0);\n        setattemptno(prevAttemptNo => prevAttemptNo + 1);\n        console.log(seconds) \n        if(inputValue==''){\n          alert('Please enter a valid input')\n          return\n        }\n        if (inputValue.length > 100) {\n          alert(\"Your proposed headline is too long.Try to shorten it for good score!!\");\n        }\n        const response = await axios.post(API_URL, { input: inputValue });\n        // setInputDict((prevInputDict) => ({\n        //   ...prevInputDict,\n        //   [text]: {\n        //     ...(prevInputDict[text] || {}),\n        //     // data: response.data\n        //     headline:response.data.Headline\n        //   }\n        // }));\n        // setInputDict((prevInputDict) => ({\n        //   ...prevInputDict,\n        //   [text]: {\n        //     ...(prevInputDict[text] || {}),\n        //     // data: response.data\n        //     score:response.data.Score\n        //   }\n        // }));\n        \n        // setInputDict((prevInputDict) => ({\n        //   ...prevInputDict,\n        //   [text]: {\n        //     ...(prevInputDict[text] || {}),\n        //     // data: response.data\n        //     consistent:response.data.Consistent\n        //   }\n        // }));\n        const newPred = { Headline: response.data.Headline, Score: response.data.Score };\n        //setPredictions([{ Headline: response.data.Headline, Score: response.data.Score }]);\n        setPredictions((prevPredictions) => [...prevPredictions, newPred]);\n        if(response.data.Consistent < 0.5){\n          alert(\"You are moving off the topic.Try to be consistent to get a good score!!\");\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n  \n    return (\n      \n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        <div className='headline' style={{display:'flex',background:'#800000', width:'100%',alignItems:'center',justifyContent:'center', alignContent:'center', height:'80px'}}>\n          <h1 style={{color:'#FFF',fontFamily:'sans-serif'}}>Headlines</h1>\n        </div>\n        <h4 style={{marginTop:\"50px\",fontFamily:'sans-serif'}}>Reframe the below headline to find your score</h4>\n        <h2 style={{margin:\"50px\",fontFamily:'sans-serif'}}>{text}</h2>\n        <Stack direction='row' sx={{width:'100%', alignItems:'center', justifyContent:\"center\", margin:'10px'}}>\n          <input className='input'\n            type=\"text\"\n            value={inputValue}\n            onChange={(event) => setInputValue(event.target.value)}\n            placeholder=\"Enter your proposed headline\"\n            required\n          />\n          <Button style={{marginLeft:'10px', top:'-10px', position:'relative',background:'#3B71CA'}} onClick={handleSubmit}>SUBMIT</Button>\n        </Stack>\n        <Table  striped bordered id = \"predictions-table\">\n          <thead>\n            <tr>\n              <th>Headline</th>\n              <th>Score</th>\n            </tr>\n          </thead>\n          <tbody id='table-body'>\n            <tr>\n              <td></td>\n              <td></td>  \n            </tr>\n          </tbody>\n        </Table>\n      \n        <span>Tab Change Count: {tabChangeCount}</span>\n        <span>{seconds}</span>\n      </div>\n  \n     \n    );\n  }\n  \n  export default Game;\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}